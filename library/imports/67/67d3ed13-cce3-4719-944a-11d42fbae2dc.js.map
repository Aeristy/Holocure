{"version":3,"sources":["assets\\Script\\Player\\EnemyDetector.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;AAGtF,4DAAuD;AAEjD,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA2C,iCAAY;IAAvD;QAAA,qEA2DC;QAzDC,wBAAwB;QACxB,qBAAe,GAAW,MAAM,CAAC;QACjC,kBAAY,GAAY,IAAI,CAAC;QAE7B,eAAS,GAAmB,IAAI,KAAK,EAAW,CAAC;QACjD,kBAAY,GAAkB,IAAI,KAAK,EAAU,CAAC;;IAoDpD,CAAC;sBA3DoB,aAAa;IAQhC,8BAAM,GAAN;QACE,eAAa,CAAC,QAAQ,GAAG,IAAI,CAAC;IAChC,CAAC;IACD,wCAAgB,GAAhB,UAAiB,KAAkB,EAAE,IAAiB;QACpD,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,EAAE;YAClB,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,yBAAe,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;YAC1D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAChC,4CAA4C;YAC5C,uCAAuC;YACvC,sCAAsC;YACtC,mBAAmB;YACnB,oBAAoB;YACpB,oDAAoD;YACpD,mDAAmD;YACnD,YAAY;YACZ,yBAAyB;YACzB,MAAM;SACP;IACH,CAAC;IACD,uCAAe,GAAf,UAAgB,KAAkB,EAAE,IAAiB;QACnD,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,EAAE;YAClB,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,yBAAe,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;SAC5D;IACH,CAAC;IACD,6BAAK,GAAL,cAAS,CAAC;IACV,sCAAc,GAAd;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS;aAC5B,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,YAAY,CAAC,yBAAe,CAAC,CAAC,SAAS,GAAG,CAAC,EAAhD,CAAgD,CAAC;aAClE,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,YAAY,CAAC,yBAAe,CAAC,CAAC,SAAS,IAAI,IAAI,EAApD,CAAoD,CAAC,CAAC;IAC5E,CAAC;IAED,gCAAQ,GAAR;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAClC,UAAC,CAAC,EAAE,CAAC;YACH,OAAA,CAAC,CAAC,YAAY,CAAC,yBAAe,CAAC,CAAC,QAAQ;gBACxC,CAAC,CAAC,YAAY,CAAC,yBAAe,CAAC,CAAC,QAAQ;QADxC,CACwC,CAC3C,CAAC;IACJ,CAAC;IACD,8BAAM,GAAN,UAAO,EAAE;QACP,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,mCAAmC;QACnC,mDAAmD;QACnD,oCAAoC;QACpC,YAAY;QACZ,IAAI;QACJ,wEAAwE;QACxE,8BAA8B;QAC9B,IAAI;IACN,CAAC;;IA1DkB,aAAa;QADjC,OAAO;OACa,aAAa,CA2DjC;IAAD,oBAAC;CA3DD,AA2DC,CA3D0C,EAAE,CAAC,SAAS,GA2DtD;kBA3DoB,aAAa","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport Movement from \"../Controller/Movement\";\nimport EnemyController from \"../Enemy/EnemyController\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class EnemyDetector extends cc.Component {\n  static instance: EnemyDetector;\n  // LIFE-CYCLE CALLBACKS:\n  closestDistance: number = 100000;\n  closestEnemy: cc.Node = null;\n\n  enemyList: Array<cc.Node> = new Array<cc.Node>();\n  distanceList: Array<number> = new Array<number>();\n  onLoad() {\n    EnemyDetector.instance = this;\n  }\n  onCollisionEnter(other: cc.Collider, self: cc.Collider) {\n    if (other.tag == 1) {\n      other.node.getComponent(EnemyController).isInRange = true;\n      this.enemyList.push(other.node);\n      //   if (this.closestDistance >= distance) {\n      //     this.closestDistance = distance;\n      //     this.closestEnemy = other.node;\n      //     this.angle =\n      //       Math.atan2(\n      //         this.closestEnemy.y - this.node.parent.y,\n      //         this.closestEnemy.x - this.node.parent.x\n      //       ) *\n      //       (180 / Math.PI);\n      //   }\n    }\n  }\n  onCollisionExit(other: cc.Collider, self: cc.Collider) {\n    if (other.tag == 1) {\n      other.node.getComponent(EnemyController).isInRange = false;\n    }\n  }\n  start() {}\n  removeFromList() {\n    this.enemyList = this.enemyList\n      .filter((item) => item.getComponent(EnemyController).currentHp > 0)\n      .filter((item) => item.getComponent(EnemyController).isInRange == true);\n  }\n\n  sortList() {\n    this.enemyList = this.enemyList.sort(\n      (a, b) =>\n        a.getComponent(EnemyController).distance -\n        b.getComponent(EnemyController).distance\n    );\n  }\n  update(dt) {\n    this.removeFromList();\n    this.sortList();\n\n    // if (this.closestEnemy == null) {\n    //   this.angle = Movement.instance.directionAngle;\n    //   this.closestDistance = 1000000;\n    //   return;\n    // }\n    // if (this.closestEnemy.getComponent(EnemyController).currentHp <= 0) {\n    //   this.closestEnemy = null;\n    // }\n  }\n}\n"]}
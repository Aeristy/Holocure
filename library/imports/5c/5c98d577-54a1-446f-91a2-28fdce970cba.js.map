{"version":3,"sources":["assets\\Script\\SlerpTest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAuC,6BAAY;IAAnD;QAAA,qEAqDC;QArBC,wDAAwD;QACxD,gBAAU,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,uBAAuB;QACjD,iBAAW,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,oBAAoB;QACrD,eAAS,GAAG,GAAG,CAAC,CAAC,oCAAoC;QACrD,iBAAW,GAAG,GAAG,CAAC,CAAC,4BAA4B;;IAiBjD,CAAC;IApDC,4CAA4C;IAC5C,yBAAK,GAAL,UAAM,UAAU,EAAE,WAAW,EAAE,CAAC;QAC9B,wCAAwC;QACxC,SAAS,cAAc,CAAC,KAAK;YAC3B,OAAO,KAAK,GAAG,IAAI,CAAC,EAAE;gBAAE,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;YAC7C,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;gBAAE,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;YAC9C,OAAO,KAAK,CAAC;QACf,CAAC;QAED,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;QACxC,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;QAE1C,gCAAgC;QAChC,IAAM,aAAa,GAAG,WAAW,GAAG,UAAU,CAAC;QAE/C,wCAAwC;QACxC,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE;YACrC,IAAI,aAAa,GAAG,CAAC,EAAE;gBACrB,WAAW,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;aAC5B;iBAAM;gBACL,WAAW,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;aAC5B;SACF;QAED,qCAAqC;QACrC,IAAM,WAAW,GAAG,UAAU,GAAG,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,CAAC;QAEhE,4CAA4C;QAC5C,OAAO,cAAc,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC;IAQD,qDAAqD;IACrD,0BAAM,GAAN,UAAO,EAAE;QACP,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;QAEvB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,EAAE;YACtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;SACnC;QAED,mCAAmC;QACnC,IAAM,CAAC,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;QAC5C,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAElE,8DAA8D;QAC9D,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAC;IApDkB,SAAS;QAD7B,OAAO;OACa,SAAS,CAqD7B;IAAD,gBAAC;CArDD,AAqDC,CArDsC,EAAE,CAAC,SAAS,GAqDlD;kBArDoB,SAAS","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class SlerpTest extends cc.Component {\n  // Hàm tính toán SLERP giữa hai góc (radian)\n  slerp(startAngle, targetAngle, t) {\n    // Chuyển đổi góc về dạng số âm và dương\n    function normalizeAngle(angle) {\n      while (angle > Math.PI) angle -= 2 * Math.PI;\n      while (angle < -Math.PI) angle += 2 * Math.PI;\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    targetAngle = normalizeAngle(targetAngle);\n\n    // Tính khoảng cách giữa hai góc\n    const angleDistance = targetAngle - startAngle;\n\n    // Xử lý việc đi ngược chiều kim đồng hồ\n    if (Math.abs(angleDistance) > Math.PI) {\n      if (angleDistance > 0) {\n        targetAngle -= 2 * Math.PI;\n      } else {\n        targetAngle += 2 * Math.PI;\n      }\n    }\n\n    // Tính giá trị góc mới sử dụng SLERP\n    const resultAngle = startAngle + t * (targetAngle - startAngle);\n\n    // Chuyển đổi kết quả về dạng số âm và dương\n    return normalizeAngle(resultAngle);\n  }\n\n  // Sử dụng hàm slerp để lấy góc mới dựa trên thời gian t\n  startAngle = Math.PI / 4; // Góc ban đầu (radian)\n  targetAngle = (Math.PI * 4) / 4; // Góc đích (radian)\n  totalTime = 1.0; // Thời gian hoàn thành SLERP (giây)\n  currentTime = 0.0; // Thời gian hiện tại (giây)\n\n  // Update được gọi mỗi khung hình trong Cocos Creator\n  update(dt) {\n    this.currentTime += dt;\n\n    if (this.currentTime >= this.totalTime) {\n      this.currentTime = this.totalTime;\n    }\n\n    // Tính toán góc mới dựa trên SLERP\n    const t = this.currentTime / this.totalTime;\n    const newAngle = this.slerp(this.startAngle, this.targetAngle, t);\n\n    // Áp dụng góc mới vào đối tượng (vd: nếu đối tượng là Sprite)\n    this.node.angle = cc.misc.radiansToDegrees(newAngle);\n  }\n}\n"]}